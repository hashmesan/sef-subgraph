type WalletFactory @entity {
  id: ID!
  wallets: [Wallet!]! @derivedFrom(field: "factory")
}

type Wallet @entity {
  id: ID!
  factory: WalletFactory!
  balance: BigInt
  domain: String!
  erc20Balance: [WalletBalance!]! @derivedFrom(field: "wallet")
  transactions: [Transaction!]! @derivedFrom(field: "wallet")
}

type WalletBalance @entity {
  id: ID!
  wallet: Wallet!
  token: Bytes,
  balance: BigInt!
}

type Summary @entity {
  id: ID!
  walletCount: BigInt
  txCount: BigInt
  feePaid: BigDecimal
  feeCollected: BigDecimal
  currentBlock: BigInt
  totalDeposits: BigDecimal
  totalWithdrawals: BigDecimal
  recoveries: BigInt
}

type Transaction @entity {
  id: ID!
  wallet: Wallet
  blockNumber: BigInt,
  blockTime: BigInt,
  from: Bytes,
  to: Bytes,
  value: BigInt,
  data: Bytes,
  gasUsed: BigInt,
  gasPrice: BigInt,
  refundAddress: Bytes,
  refundFee: BigInt,
  isMeta: Boolean,
  metaSuccess: Boolean
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
}

type Transfer @entity {
  id: ID!
  transaction: Transaction!
  from: Bytes
  to: Bytes
  value: BigInt
  token: Bytes
}

type TransferSummary @entity {
  id: ID!
  value: BigInt
  token: Bytes
  address: Bytes
}